// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: privval/service.proto

package privval

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	privval "github.com/tendermint/tendermint/proto/privval"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("privval/service.proto", fileDescriptor_310025e015fd90f7) }

var fileDescriptor_310025e015fd90f7 = []byte{
	// 262 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x8d, 0xbd, 0x4a, 0xc4, 0x40,
	0x14, 0x46, 0x13, 0x94, 0x45, 0x86, 0xad, 0x06, 0x04, 0xd9, 0x62, 0x3a, 0x75, 0x05, 0x9d, 0x88,
	0x3e, 0x81, 0xe9, 0xc4, 0x26, 0x28, 0x5a, 0x68, 0x95, 0x9f, 0x4b, 0x1c, 0xd8, 0xcc, 0x8d, 0x33,
	0x37, 0x01, 0xdf, 0xc2, 0xd2, 0x47, 0xb2, 0xdc, 0xd2, 0x52, 0x92, 0x17, 0x91, 0x4d, 0x32, 0xac,
	0x16, 0x9b, 0x74, 0xc3, 0xdc, 0xf3, 0x9d, 0xc3, 0x0e, 0x4b, 0xa3, 0xea, 0x3a, 0x5e, 0x05, 0x16,
	0x4c, 0xad, 0x52, 0x90, 0xa5, 0x41, 0x42, 0xce, 0x09, 0x74, 0x06, 0xa6, 0x50, 0x9a, 0xe4, 0x40,
	0x2c, 0x8e, 0xba, 0x53, 0xe0, 0x06, 0x85, 0xcd, 0x6d, 0x4f, 0x5f, 0x7d, 0xee, 0xb1, 0x79, 0x68,
	0x30, 0xce, 0xd2, 0xd8, 0xd2, 0x4d, 0x74, 0xcb, 0x1f, 0xd9, 0x7e, 0xa4, 0x74, 0xce, 0x8f, 0xe5,
	0x3f, 0x0f, 0x12, 0x3a, 0x9b, 0xdc, 0xdc, 0xef, 0xe1, 0xad, 0x02, 0x4b, 0x8b, 0x93, 0x29, 0xcc,
	0x96, 0xa8, 0x2d, 0xf0, 0x17, 0x36, 0x8b, 0xaa, 0xe4, 0x0e, 0xde, 0xf9, 0xe9, 0xc8, 0xa2, 0x23,
	0x9c, 0x7a, 0x39, 0x0d, 0x0e, 0xf2, 0x94, 0x1d, 0x3c, 0xa8, 0x5c, 0x3f, 0x21, 0x01, 0x3f, 0xdb,
	0xbd, 0x72, 0x8c, 0x0b, 0x9c, 0x8f, 0xa3, 0x90, 0xf5, 0xf0, 0x10, 0x41, 0x36, 0xdf, 0xfc, 0x46,
	0x06, 0x4b, 0xb4, 0xf1, 0x8a, 0x5f, 0x8c, 0xaf, 0x1d, 0xe7, 0x62, 0x97, 0x53, 0xb1, 0xed, 0xa0,
	0x0f, 0x86, 0xe1, 0x57, 0x23, 0xfc, 0x75, 0x23, 0xfc, 0x9f, 0x46, 0xf8, 0x1f, 0xad, 0xf0, 0xd6,
	0xad, 0xf0, 0xbe, 0x5b, 0xe1, 0x3d, 0x2f, 0x73, 0x45, 0xaf, 0x55, 0x22, 0x53, 0x2c, 0x82, 0xad,
	0xf5, 0xef, 0x73, 0x50, 0x27, 0xb3, 0xae, 0x74, 0xfd, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xe1, 0xcd,
	0x37, 0xaa, 0x2c, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BroadcastAPIClient is the client API for BroadcastAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BroadcastAPIClient interface {
	Ping(ctx context.Context, in *privval.PingRequest, opts ...grpc.CallOption) (*privval.PingResponse, error)
	PubKey(ctx context.Context, in *privval.PubKeyRequest, opts ...grpc.CallOption) (*privval.PubKeyResponse, error)
	SignVote(ctx context.Context, in *privval.SignVoteRequest, opts ...grpc.CallOption) (*privval.SignedVoteResponse, error)
	SignProposal(ctx context.Context, in *privval.SignProposalRequest, opts ...grpc.CallOption) (*privval.SignedProposalResponse, error)
}

type broadcastAPIClient struct {
	cc *grpc.ClientConn
}

func NewBroadcastAPIClient(cc *grpc.ClientConn) BroadcastAPIClient {
	return &broadcastAPIClient{cc}
}

func (c *broadcastAPIClient) Ping(ctx context.Context, in *privval.PingRequest, opts ...grpc.CallOption) (*privval.PingResponse, error) {
	out := new(privval.PingResponse)
	err := c.cc.Invoke(ctx, "/tendermint.privval.BroadcastAPI/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastAPIClient) PubKey(ctx context.Context, in *privval.PubKeyRequest, opts ...grpc.CallOption) (*privval.PubKeyResponse, error) {
	out := new(privval.PubKeyResponse)
	err := c.cc.Invoke(ctx, "/tendermint.privval.BroadcastAPI/PubKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastAPIClient) SignVote(ctx context.Context, in *privval.SignVoteRequest, opts ...grpc.CallOption) (*privval.SignedVoteResponse, error) {
	out := new(privval.SignedVoteResponse)
	err := c.cc.Invoke(ctx, "/tendermint.privval.BroadcastAPI/SignVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *broadcastAPIClient) SignProposal(ctx context.Context, in *privval.SignProposalRequest, opts ...grpc.CallOption) (*privval.SignedProposalResponse, error) {
	out := new(privval.SignedProposalResponse)
	err := c.cc.Invoke(ctx, "/tendermint.privval.BroadcastAPI/SignProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BroadcastAPIServer is the server API for BroadcastAPI service.
type BroadcastAPIServer interface {
	Ping(context.Context, *privval.PingRequest) (*privval.PingResponse, error)
	PubKey(context.Context, *privval.PubKeyRequest) (*privval.PubKeyResponse, error)
	SignVote(context.Context, *privval.SignVoteRequest) (*privval.SignedVoteResponse, error)
	SignProposal(context.Context, *privval.SignProposalRequest) (*privval.SignedProposalResponse, error)
}

// UnimplementedBroadcastAPIServer can be embedded to have forward compatible implementations.
type UnimplementedBroadcastAPIServer struct {
}

func (*UnimplementedBroadcastAPIServer) Ping(ctx context.Context, req *privval.PingRequest) (*privval.PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedBroadcastAPIServer) PubKey(ctx context.Context, req *privval.PubKeyRequest) (*privval.PubKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PubKey not implemented")
}
func (*UnimplementedBroadcastAPIServer) SignVote(ctx context.Context, req *privval.SignVoteRequest) (*privval.SignedVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignVote not implemented")
}
func (*UnimplementedBroadcastAPIServer) SignProposal(ctx context.Context, req *privval.SignProposalRequest) (*privval.SignedProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignProposal not implemented")
}

func RegisterBroadcastAPIServer(s *grpc.Server, srv BroadcastAPIServer) {
	s.RegisterService(&_BroadcastAPI_serviceDesc, srv)
}

func _BroadcastAPI_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(privval.PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastAPIServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tendermint.privval.BroadcastAPI/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastAPIServer).Ping(ctx, req.(*privval.PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BroadcastAPI_PubKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(privval.PubKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastAPIServer).PubKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tendermint.privval.BroadcastAPI/PubKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastAPIServer).PubKey(ctx, req.(*privval.PubKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BroadcastAPI_SignVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(privval.SignVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastAPIServer).SignVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tendermint.privval.BroadcastAPI/SignVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastAPIServer).SignVote(ctx, req.(*privval.SignVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BroadcastAPI_SignProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(privval.SignProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcastAPIServer).SignProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tendermint.privval.BroadcastAPI/SignProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcastAPIServer).SignProposal(ctx, req.(*privval.SignProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BroadcastAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tendermint.privval.BroadcastAPI",
	HandlerType: (*BroadcastAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _BroadcastAPI_Ping_Handler,
		},
		{
			MethodName: "PubKey",
			Handler:    _BroadcastAPI_PubKey_Handler,
		},
		{
			MethodName: "SignVote",
			Handler:    _BroadcastAPI_SignVote_Handler,
		},
		{
			MethodName: "SignProposal",
			Handler:    _BroadcastAPI_SignProposal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "privval/service.proto",
}
